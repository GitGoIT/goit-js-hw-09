{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAQC,SAASC,cAAc,uBAC/BC,EAAOF,SAASC,cAAc,sBAC9BE,EAASH,SAASC,cAAc,wBAIf,SAAdG,EAAcC,EAAUC,GAW/B,OAViB,IAAIC,SAAQ,CAACC,EAASC,KACrCC,YAAW,KACSC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,EAAUQ,MAAAP,IAEMG,EAAnB,C,SAAEJ,EAAUQ,MAAAP,GAAQ,GAE5BA,EAAM,G,CAZSN,SAASC,cAAc,yBAqC/Ba,iBAAiB,SAnB3B,SAAuBC,GACjBA,EAAIC,iBAC4C,IAA5CC,EAAaC,OAAOnB,EAAMoB,OAC1BC,EAAYF,OAAOhB,EAAKiB,OACS,IAApC,IAAIE,EAAI,EAAGA,EAAIlB,EAAOgB,MAAOE,IAChCjB,EAAc,EAAIiB,EAAGJ,EAAaI,EAAID,GACPE,MAAvB,EAACjB,SAAEA,EAAUQ,MAAAU,MACjBC,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqBrB,QAAiBkB,MAAU,IAGnDI,OAAM,EAACtB,SAAEA,EAAUQ,MAAAe,MAClBJ,EAAA3B,GAAS4B,OAAOI,QACd,sBAAoBxB,QAAiBuB,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delay = document.querySelector('input[name=\"delay\"]') // отримуємо доступ до поля First delay\nconst step = document.querySelector('input[name=\"step\"]') // отримуємо доступ до поля Delay step\nconst amount = document.querySelector('input[name=\"amount\"]') // отримуємо доступ до поля Amount\nconst createBtn = document.querySelector('button[type=\"submit\"]') // отримуємо доступ до кнопки Create promises\n\n\nfunction createPromise(position, delay) {\n   const promise = new Promise((resolve, reject) => {   // рефактиримо функцію, створюємо новий проміс\n    setTimeout(() => {                                  // додаємо таймер\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    resolve({ position, delay });                       // доповнюємо статичним методом resolve\n  } else {\n    reject({ position, delay });                        // доповнюємо статичним методом reject\n  }\n}, delay);\n  });\n  return promise;                                        // повертаємо результат\n}\n\n\nfunction onClickCreate(evt) { // функція обробки кліка на кнопку Create promises\n      evt.preventDefault();   // знімаємо перезавантаження сторінки при роботі з формою\n      let firstDelay = Number(delay.value);     //змінна для введеного значення в First delay передана числом\n      let delayStep = Number(step.value);       //змінна для введеного значення в Delay step передана числом\n  for (let i = 0; i < amount.value; i++) {      // перебираємо порядок\n    createPromise(1 + i, firstDelay + i * delayStep) // передаємо аргументи порядку в position та delay\n      .then(({ position, delay }) => {       // виводимо результат обробки\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {     // ловимо помилку та виводимо результат обробки\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n};\n\ncreateBtn.addEventListener('click', onClickCreate); // слухач для кнопки Create promises\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$delay","document","querySelector","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay1","Promise","resolve","reject","setTimeout","Math","random","delay","addEventListener","evt","preventDefault","firstDelay","Number","value","delayStep","i","then","delay2","$parcel$interopDefault","Notify","success","catch","delay3","failure"],"version":3,"file":"03-promises.e89ed9fa.js.map"}